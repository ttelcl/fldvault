<Application
    x:Class="ZvaultViewerEditor.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:ZvaultViewerEditor"
    xmlns:converters="clr-namespace:ZvaultViewerEditor.Converters"
    xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    Startup="App_Startup"
    Exit="Application_Exit">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- See https://mahapps.com/docs/themes/usage -->
                <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.FlatButton.xaml" />
                <!-- Theme setting -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Themes/Dark.Olive.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <!-- Instead of a mah:ControlsHelper.ContentCharacterCasing="Normal" on each groupbox -->
            <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MahApps.Styles.GroupBox}">
                <Setter Property="mah:ControlsHelper.ContentCharacterCasing" Value="Normal" />
            </Style>
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MahApps.Styles.Button}">
                <Setter Property="mah:ControlsHelper.ContentCharacterCasing" Value="Normal" />
            </Style>
            <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource MahApps.Styles.TabItem}">
                <Setter Property="mah:HeaderedControlHelper.HeaderFontSize" Value="20"/>
            </Style>
            <converters:NullVisibilityConverter
                x:Key="VisibleIfNotNull"/>
            <converters:NullVisibilityConverter
                x:Key="VisibleIfNull"
                NullValue="{x:Static Visibility.Visible}"
                NotNullValue="{x:Static Visibility.Collapsed}"/>
            <converters:VisibleIfConverter
                x:Key="VisibleIf"/>
            <converters:VisibleIfConverter
                x:Key="VisibleIfNot"
                MatchValue="{x:Static Visibility.Collapsed}"
                MismatchValue="{x:Static Visibility.Visible}"/>
            <converters:StringMatchVisibilityConverter x:Key="VisibleIfString"/>
            <converters:ValueMatchConverter x:Key="ValueIs"/>
        </ResourceDictionary>
    </Application.Resources>
</Application>
